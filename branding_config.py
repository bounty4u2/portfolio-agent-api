"""
AlphaSheet Intelligence™ - Branding Configuration
Centralized branding and product configuration for the entire system
"""

from typing import Dict, Any

class AlphaSheetBranding:
    """
    Centralized branding configuration for AlphaSheet Intelligence™
    """
    
    # Core Brand Identity
    PRODUCT_NAME = "AlphaSheet Intelligence™"
    PARENT_BRAND = "AlphaSheet AI™"
    SHEET_PRODUCT = "AlphaSheet AI™ Portfolio Tracker"
    COMPANY_NAME = "AlphaSheet"
    
    # Product Taglines
    TAGLINE = "Institutional-Grade Portfolio Intelligence"
    DESCRIPTION = "The AI engine powering AlphaSheet AI™ Portfolio Tracker"
    
    # Tier Branding
    TIER_NAMES = {
        'starter': 'Intelligence Starter',
        'growth': 'Intelligence Growth',
        'premium': 'Intelligence Premium'
    }
    
    TIER_TAGLINES = {
        'starter': 'Essential portfolio monitoring powered by AI',
        'growth': 'Active intelligence for serious investors',
        'premium': 'Institutional command center for professionals'
    }
    
    # Email Branding
    EMAIL_FROM_NAME = "AlphaSheet Intelligence™"
    EMAIL_FROM_ADDRESS = "intelligence@alphasheet.ai"
    EMAIL_SUPPORT = "support@alphasheet.ai"
    
    # Colors (for HTML emails and reports)
    BRAND_COLORS = {
        'primary': '#2C3E50',      # Dark blue-gray
        'secondary': '#3498DB',    # Bright blue
        'success': '#27AE60',      # Green
        'warning': '#F39C12',      # Orange
        'danger': '#E74C3C',       # Red
        'premium': '#9B59B6',      # Purple (for premium tier)
        'background': '#F8F9FA',   # Light gray
        'text': '#2C3E50'          # Dark text
    }
    
    # API Response Headers
    API_HEADERS = {
        'X-Powered-By': 'AlphaSheet Intelligence™',
        'X-Product-Suite': 'AlphaSheet AI™',
        'X-Intelligence-Version': '1.0.0'
    }
    
    @staticmethod
    def get_email_signature(tier: str = 'starter') -> str:
        """
        Get branded email signature
        
        Args:
            tier: Customer tier
            
        Returns:
            HTML email signature
        """
        tier_name = AlphaSheetBranding.TIER_NAMES.get(tier, 'Intelligence Starter')
        
        return f"""
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
            <p style="font-size: 14px; color: #666; margin: 5px 0;">
                <strong>{AlphaSheetBranding.PRODUCT_NAME}</strong><br>
                {AlphaSheetBranding.TAGLINE}
            </p>
            <p style="font-size: 12px; color: #999; margin: 5px 0;">
                You're subscribed to: <strong>{tier_name}</strong><br>
                Part of the {AlphaSheetBranding.PARENT_BRAND} Suite
            </p>
            <p style="font-size: 11px; color: #999; margin: 10px 0 5px 0;">
                <a href="https://alphasheet.ai/intelligence" style="color: #3498DB;">Manage Subscription</a> | 
                <a href="https://alphasheet.ai/support" style="color: #3498DB;">Get Support</a> | 
                <a href="https://alphasheet.ai/upgrade" style="color: #3498DB;">Upgrade Plan</a>
            </p>
        </div>
        """
    
    @staticmethod
    def get_report_header(customer_name: str = None, tier: str = 'starter') -> str:
        """
        Get branded report header
        
        Args:
            customer_name: Customer's name
            tier: Customer tier
            
        Returns:
            HTML report header
        """
        tier_name = AlphaSheetBranding.TIER_NAMES.get(tier, 'Intelligence Starter')
        greeting = f"Portfolio Report for {customer_name}" if customer_name else "Portfolio Intelligence Report"
        
        return f"""
        <div style="background: linear-gradient(135deg, {AlphaSheetBranding.BRAND_COLORS['primary']} 0%, {AlphaSheetBranding.BRAND_COLORS['secondary']} 100%); 
                    color: white; padding: 30px; border-radius: 10px 10px 0 0;">
            <h1 style="margin: 0; font-size: 28px; font-weight: 300;">
                {AlphaSheetBranding.PRODUCT_NAME}
            </h1>
            <p style="margin: 5px 0; font-size: 16px; opacity: 0.9;">
                {greeting}
            </p>
            <p style="margin: 10px 0 0 0; font-size: 12px; opacity: 0.8;">
                Generated by {tier_name} • {AlphaSheetBranding.get_current_date()}
            </p>
        </div>
        """
    
    @staticmethod
    def get_tier_badge(tier: str) -> str:
        """
        Get HTML badge for tier
        
        Args:
            tier: Customer tier
            
        Returns:
            HTML badge element
        """
        colors = {
            'starter': '#95A5A6',  # Gray
            'growth': '#3498DB',    # Blue
            'premium': '#9B59B6'    # Purple
        }
        
        tier_name = AlphaSheetBranding.TIER_NAMES.get(tier, 'Intelligence Starter')
        color = colors.get(tier, '#95A5A6')
        
        return f"""
        <span style="display: inline-block; padding: 4px 12px; 
                     background: {color}; color: white; 
                     border-radius: 20px; font-size: 12px; 
                     font-weight: bold; text-transform: uppercase;">
            {tier_name}
        </span>
        """
    
    @staticmethod
    def get_api_response_wrapper(data: Dict[str, Any], tier: str = 'starter') -> Dict[str, Any]:
        """
        Wrap API response with branding metadata
        
        Args:
            data: Response data
            tier: Customer tier
            
        Returns:
            Wrapped response with branding
        """
        return {
            'success': True,
            'data': data,
            'metadata': {
                'powered_by': AlphaSheetBranding.PRODUCT_NAME,
                'product_suite': AlphaSheetBranding.PARENT_BRAND,
                'tier': AlphaSheetBranding.TIER_NAMES.get(tier, 'Intelligence Starter'),
                'version': '1.0.0',
                'timestamp': AlphaSheetBranding.get_current_timestamp()
            }
        }
    
    @staticmethod
    def get_email_subject(report_type: str, tier: str = 'starter') -> str:
        """
        Get branded email subject line
        
        Args:
            report_type: Type of report/email
            tier: Customer tier
            
        Returns:
            Email subject line
        """
        subjects = {
            'weekly_summary': f"📊 Your Weekly Portfolio Summary - {AlphaSheetBranding.PRODUCT_NAME}",
            'intelligence_brief': f"🎯 Weekly Intelligence Brief - {AlphaSheetBranding.PRODUCT_NAME}",
            'market_brief': f"📈 Daily Market Brief - {AlphaSheetBranding.PRODUCT_NAME}",
            'alert': f"🚨 Portfolio Alert - {AlphaSheetBranding.PRODUCT_NAME}",
            'report': f"📋 Portfolio Analysis Report - {AlphaSheetBranding.PRODUCT_NAME}",
            'welcome': f"🎉 Welcome to {AlphaSheetBranding.PRODUCT_NAME}!",
            'upgrade': f"⭐ Unlock More with {AlphaSheetBranding.TIER_NAMES.get('premium')}"
        }
        
        return subjects.get(report_type, f"{AlphaSheetBranding.PRODUCT_NAME} Update")
    
    @staticmethod
    def get_marketing_copy(tier: str = 'starter') -> Dict[str, str]:
        """
        Get marketing copy for different contexts
        
        Args:
            tier: Target tier for marketing
            
        Returns:
            Marketing copy dictionary
        """
        if tier == 'starter':
            return {
                'headline': 'Start Your Intelligence Journey',
                'subheadline': 'Professional portfolio analysis for individual investors',
                'cta': 'Start Free Trial',
                'features_intro': 'Everything you need to monitor your portfolio:',
                'upgrade_prompt': 'Ready for more? Upgrade to Intelligence Growth for advanced features.'
            }
        elif tier == 'growth':
            return {
                'headline': 'Grow with Intelligence',
                'subheadline': 'Advanced AI insights for active investors',
                'cta': 'Upgrade to Growth',
                'features_intro': 'Unlock powerful analytical tools:',
                'upgrade_prompt': 'Go Premium for unlimited reports and real-time alerts.'
            }
        else:  # premium
            return {
                'headline': 'Premium Intelligence Command Center',
                'subheadline': 'Institutional-grade tools for professionals',
                'cta': 'Go Premium',
                'features_intro': 'Complete suite of professional tools:',
                'upgrade_prompt': "You're using the most advanced portfolio intelligence available."
            }
    
    @staticmethod
    def get_footer_links() -> str:
        """
        Get standard footer links for emails and reports
        
        Returns:
            HTML footer links
        """
        return """
        <div style="text-align: center; padding: 20px; background: #f8f9fa; margin-top: 40px;">
            <p style="margin: 10px 0;">
                <a href="https://alphasheet.ai" style="color: #3498DB; text-decoration: none; margin: 0 10px;">
                    AlphaSheet AI™
                </a>
                <span style="color: #ccc;">|</span>
                <a href="https://alphasheet.ai/intelligence" style="color: #3498DB; text-decoration: none; margin: 0 10px;">
                    Intelligence Portal
                </a>
                <span style="color: #ccc;">|</span>
                <a href="https://alphasheet.ai/tracker" style="color: #3498DB; text-decoration: none; margin: 0 10px;">
                    Portfolio Tracker
                </a>
                <span style="color: #ccc;">|</span>
                <a href="https://alphasheet.ai/support" style="color: #3498DB; text-decoration: none; margin: 0 10px;">
                    Support
                </a>
            </p>
            <p style="font-size: 11px; color: #999; margin: 10px 0;">
                © 2024 AlphaSheet. All rights reserved.<br>
                AlphaSheet Intelligence™ and AlphaSheet AI™ are trademarks of AlphaSheet.
            </p>
        </div>
        """
    
    @staticmethod
    def get_current_date() -> str:
        """Get current date in branded format"""
        from datetime import datetime
        return datetime.now().strftime("%B %d, %Y")
    
    @staticmethod
    def get_current_timestamp() -> str:
        """Get current timestamp in ISO format"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    @staticmethod
    def format_error_message(error_type: str, user_friendly: bool = True) -> str:
        """
        Format error messages with branding
        
        Args:
            error_type: Type of error
            user_friendly: Whether to show user-friendly message
            
        Returns:
            Formatted error message
        """
        if user_friendly:
            messages = {
                'rate_limit': f"{AlphaSheetBranding.PRODUCT_NAME}: You've reached your monthly report limit. Please upgrade to continue.",
                'auth_failed': f"{AlphaSheetBranding.PRODUCT_NAME}: Authentication failed. Please check your credentials.",
                'portfolio_limit': f"{AlphaSheetBranding.PRODUCT_NAME}: Portfolio limit reached for your tier. Please upgrade to add more portfolios.",
                'feature_locked': f"{AlphaSheetBranding.PRODUCT_NAME}: This feature is not available in your current tier. Please upgrade to access.",
                'general': f"{AlphaSheetBranding.PRODUCT_NAME}: An error occurred. Our team has been notified."
            }
            return messages.get(error_type, messages['general'])
        else:
            return f"{AlphaSheetBranding.PRODUCT_NAME} Error: {error_type}"


# Configuration for use in templates
BRANDING_CONFIG = {
    'product_name': AlphaSheetBranding.PRODUCT_NAME,
    'parent_brand': AlphaSheetBranding.PARENT_BRAND,
    'sheet_product': AlphaSheetBranding.SHEET_PRODUCT,
    'tagline': AlphaSheetBranding.TAGLINE,
    'colors': AlphaSheetBranding.BRAND_COLORS,
    'tier_names': AlphaSheetBranding.TIER_NAMES,
    'email_from': AlphaSheetBranding.EMAIL_FROM_NAME,
    'support_email': AlphaSheetBranding.EMAIL_SUPPORT
}


def test_branding():
    """Test branding configuration"""
    print(f"🎨 {AlphaSheetBranding.PRODUCT_NAME} Branding Test")
    print("=" * 50)
    
    # Test tier names
    print("\n📊 Tier Branding:")
    for tier in ['starter', 'growth', 'premium']:
        print(f"  {tier}: {AlphaSheetBranding.TIER_NAMES[tier]}")
    
    # Test email subjects
    print("\n📧 Email Subjects:")
    print(f"  Weekly: {AlphaSheetBranding.get_email_subject('weekly_summary')}")
    print(f"  Alert: {AlphaSheetBranding.get_email_subject('alert')}")
    
    # Test API wrapper
    print("\n🔧 API Response:")
    sample_response = AlphaSheetBranding.get_api_response_wrapper(
        {'portfolio_value': 100000}, 
        'growth'
    )
    print(f"  Powered by: {sample_response['metadata']['powered_by']}")
    print(f"  Tier: {sample_response['metadata']['tier']}")
    
    print("\n✅ Branding configuration loaded successfully!")


if __name__ == '__main__':
    test_branding()